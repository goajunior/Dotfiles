{
  "header": {
    "prefix": "header",
    "body": [
      "\"\"\"",
      "Created on ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}T${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
      "",
      "@author: ${6:name}",
      "\"\"\""
    ],
    "description": "Cabecalho para codigos python"
  },
  "mylogger": {
    "prefix": "mylog",
    "body": [
      "def my_logger(orig_func):",
      "   import logging",
      "   logging.basicConfig(filename='{}.log'.format(orig_func.__name__), level=logging.INFO)",
      "",
      "   @wraps(orig_func)",
      "   def wrapper(*args, **kwargs):",
      "       logging.info('{} ran with args: {}, and kwargs: {}'.format(orig_func.__name__, args, kwargs))",
      "       return orig_func(*args, **kwargs)",
      "   return wrapper"
    ],
    "description": "Funcao para fazer logging de outras funcoes (decorator)"
  },
  "mytimer": {
    "prefix": "mytimer",
    "body": [
      "def my_timer(orig_func):",
      "   import time",
      "",
      "   @wraps(orig_func)",
      "   def wrapper(*args, **kwargs):",
      "       t1 = time.time()",
      "       result = orig_func(*args, **kwargs)",
      "       t2 = time.time() - t1",
      "       print('{} ran in {} sec'.format(orig_func.__name__, t2))",
      "       return result",
      "   return wrapper"
    ],
    "description": "Funcao para medir tempo (decorator)"
  }
}
